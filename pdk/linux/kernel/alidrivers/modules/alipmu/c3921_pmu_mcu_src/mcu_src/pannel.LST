C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE PANNEL
OBJECT MODULE PLACED IN pannel.OBJ
COMPILER INVOKED BY: D:\SW_Install\C51\BIN\C51.EXE pannel.c LARGE BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <dp8051xp.h>
   2          #include <stdio.h>
   3          #include <intrins.h>
   4          #include "sys.h"
*** WARNING C322 IN LINE 90 OF sys.h: unknown identifier
   5          #include "pannel.h"
   6          #include "uart.h"
   7          
   8          //============================================================//
   9          #if PMU_MCU_M3503
*** WARNING C322 IN LINE 9 OF pannel.c: unknown identifier
              #define PANNEL_KEY                                                      0x55
              #else
  12                  #if PMU_MCU_M3821
*** WARNING C322 IN LINE 12 OF pannel.c: unknown identifier
                              #define PANNEL_KEY                                         0x44
                      #else
  15                          #define PANNEL_KEY                                         0x07
  16                  #endif
  17          #endif
  18          
  19          #define EXTERNAL_PULL_HIGH                                       TRUE
  20          #define SETING_ADDR                                                  0x48
  21          #define DIG0_ADDR                                                           0x68
  22          #define DIG1_ADDR                                                           0x6a
  23          #define DIG2_ADDR                                                           0x6c
  24          #define DIG3_ADDR                                                           0x6e
  25          #define KEY_ADDR                                                            0x4f
  26          
  27          #define ERR_I2C_SCL_LOCK                                           1
  28          #define ERR_I2C_SDA_LOCK                                           1
  29          #define I2C_GPIO_TIMES_OUT                                              10
  30          #define ERR_TIME_OUT                                                  -34 /* Waiting time out */
  31          #define ERR_FAILURE                                                    -9 /* Common error, operation not succe
             -ss */
  32          
  33          #ifdef PMU_MCU_M3821
              #define SYS_I2C_SDA                                                     XPMU_GPIO_1
              #define SYS_I2C_SCL                                                     XPMU_GPIO_0
              #else
  37                  #ifdef PMU_MCU_M3503
                              #define SYS_I2C_SDA                                       XPMU_GPIO_0
                              #define SYS_I2C_SCL                                        XPMU_GPIO_1
                      #else
  41                          #define SYS_I2C_SDA                                       XPMU_GPIO_0
  42                          #define SYS_I2C_SCL                                        XPMU_GPIO1_0
  43                  #endif
  44          #endif
  45          
  46          //============================================================//
  47          static void  set_sda_out()
  48          {
  49   1              hal_gpio_bit_dir_set(SYS_I2C_SDA, HAL_GPIO_O_DIR);
  50   1      }
  51          
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 2   

  52          static void set_sda_in()
  53          {
  54   1              hal_gpio_bit_dir_set(SYS_I2C_SDA, HAL_GPIO_I_DIR);
  55   1      }
  56          
  57          #ifdef EXTERNAL_PULL_HIGH 
  58          static void set_sda_hi()
  59          {
  60   1              set_sda_in();
  61   1      }
  62          
  63          static void set_sda_lo()
  64          {
  65   1              set_sda_out();
  66   1              hal_gpio_bit_set(SYS_I2C_SDA, HAL_GPIO_SER_LOW);
  67   1      }
  68          #else
              static void set_sda_hi()
              {
                      hal_gpio_bit_set(SYS_I2C_SDA, HAL_GPIO_SET_HI);
              }
              
              static void set_sda_lo()
              {
                      hal_gpio_bit_set(SYS_I2C_SDA, HAL_GPIO_SER_LOW);
              }
              #endif
  79          
  80          static void set_scl_out()
  81          {
  82   1              hal_gpio_bit_dir_set(SYS_I2C_SCL, HAL_GPIO_O_DIR);
  83   1      }
  84          
  85          static void set_scl_in()
  86          {
  87   1              hal_gpio_bit_dir_set(SYS_I2C_SCL, HAL_GPIO_I_DIR);
  88   1      }
  89          
  90          #ifdef EXTERNAL_PULL_HIGH
  91          static void set_scl_hi()
  92          {
  93   1              set_scl_in();
  94   1      }
  95          
  96          static void set_scl_lo()
  97          {
  98   1              set_scl_out();
  99   1              hal_gpio_bit_set(SYS_I2C_SCL, HAL_GPIO_SER_LOW);
 100   1      }
 101          #else
              static void set_scl_hi()
              {
                      hal_gpio_bit_set(SYS_I2C_SCL, HAL_GPIO_SET_HI);
              }
              
              static void set_scl_lo()
              {
                    hal_gpio_bit_set(SYS_I2C_SCL, HAL_GPIO_SER_LOW);
              }
              #endif
 112          
 113          static UINT8  get_scl()
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 3   

 114          {
 115   1              UINT8 ret = 0;
 116   1              
 117   1              ret = hal_gpio_bit_get(SYS_I2C_SCL);
 118   1              return ret;
 119   1      }
 120          
 121          static UINT8  get_sda()
 122          {
 123   1              UINT8 ret = 0;
 124   1              
 125   1              ret = hal_gpio_bit_get(SYS_I2C_SDA);
 126   1              return ret;
 127   1      }
 128          
 129          void OneNop()
 130          {
 131   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 132   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 133   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 134   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 135   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 136   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 137   1              _nop_();_nop_();
 138   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 139   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 140   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 141   1      }
 142          
 143          void delay_2us()
 144          {
 145   1              _nop_();_nop_();_nop_();_nop_();_nop_();
 146   1              _nop_();_nop_();_nop_();_nop_();_nop_(); 
 147   1      
 148   1      }
 149          
 150          static void  delay_ms( UINT8 ms )
 151          {
 152   1              UINT16 i = 0;
 153   1              while ( ms -- )
 154   1              {
 155   2                      for( i = 0; i != 300; i++ );
 156   2              }
 157   1      }
 158          
 159          static void  delay( int dat)
 160          {
 161   1              UINT16 i = 0;
 162   1              while ( dat-- ) 
 163   1              {
 164   2                      for( i = 0; i != 10000; i++ );
 165   2              }
 166   1      }
 167          /*---------------------------------------------------
 168          int i2c_gpio_phase_start(id);
 169                  Generate i2c_gpio_phase_start Condition:
 170                  Stream Format:
 171                          SCL   _____/--------\___
 172                          SDA   =---------\_____
 173                          width (4.7u)4.7u|4.7u|
 174                  Arguments:
 175                          NONE
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 4   

 176                  Return value:
 177                          int SUCCESS                             0
 178                          int ERR_I2C_SCL_LOCK    1
 179                          int ERR_I2C_SDA_LOCK    2
 180          ----------------------------------------------------*/
 181          static UINT8 i2c_gpio_phase_start()
 182          {
 183   1      #ifdef EXTERNAL_PULL_HIGH 
 184   1              set_sda_out();
 185   1              set_scl_out();
 186   1      #endif
 187   1      
 188   1              set_sda_hi();
 189   1              if(!get_scl())
 190   1              {
 191   2                      OneNop();
 192   2              }
 193   1              
 194   1              set_scl_hi();
 195   1              OneNop();
 196   1              if(!get_scl())
 197   1              {
 198   2                      //PMU_PRINTF("i2c_gpio_phase_start err,ERR_I2C_SCL_LOCK\n");
 199   2                      return ERR_I2C_SCL_LOCK;
 200   2              }
 201   1      
 202   1              if(!get_sda())
 203   1              {
 204   2                      //PMU_PRINTF("i2c_gpio_phase_start err,ERR_I2C_SDA_LOCK\n");
 205   2                      return ERR_I2C_SDA_LOCK;
 206   2              }
 207   1      
 208   1              set_sda_lo();
 209   1              OneNop();
 210   1              set_scl_lo();
 211   1              return SUCCESS;
 212   1      }
 213          
 214          /*---------------------------------------------------
 215          int i2c_gpio_phase_stop(id);
 216                  Generate i2c_gpio_phase_stop Condition:
 217                  Stream Format:
 218                          SCL   _____/-------------------------------
 219                          SDA   __________/--------------------------
 220                          width  4.7u|4.7u|4.7u from next i2c_gpio_phase_start bit
 221                  Arguments:
 222                          NONE
 223                  Return value:
 224                          int SUCCESS                             0
 225                          int ERR_I2C_SCL_LOCK    1
 226                          int ERR_I2C_SDA_LOCK    2
 227          ----------------------------------------------------*/
 228          static INT8 i2c_gpio_phase_stop()
 229          {
 230   1      #ifdef EXTERNAL_PULL_HIGH 
 231   1              set_sda_out();
 232   1              set_scl_out();
 233   1      #endif
 234   1      
 235   1              set_sda_lo();
 236   1              OneNop();
 237   1              set_scl_hi();
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 5   

 238   1              OneNop();
 239   1              if(!get_scl())
 240   1              {
 241   2                      //PMU_PRINTF("i2c_gpio_phase_stop err,ERR_I2C_SCL_LOCK\n");
 242   2                      return ERR_I2C_SCL_LOCK;
 243   2              }
 244   1      
 245   1              set_sda_hi();
 246   1              delay_2us();
 247   1              OneNop();
 248   1      
 249   1              if(!get_sda())
 250   1              {
 251   2                      //PMU_PRINTF("i2c_gpio_phase_stop err,ERR_I2C_SDA_LOCK\n");
 252   2                      return ERR_I2C_SDA_LOCK;
 253   2              }
 254   1              
 255   1              return SUCCESS;
 256   1      }
 257          
 258          /*---------------------------------------------------
 259          void i2c_gpio_phase_set_bit(id, int val);
 260                  Set a BIT (Hi or Low)
 261                  Stream Format:
 262                          SCL   _____/---\
 263                          SDA   ??AAAAAAAA
 264                          width  4.7u| 4u|
 265                  Arguments:
 266                          int i   : Set(1) or Clear(0) this bit on iic bus
 267                  Return value:
 268                          NONE
 269          ----------------------------------------------------*/
 270          static void i2c_gpio_phase_set_bit(int val)
 271          {
 272   1      #ifdef EXTERNAL_PULL_HIGH 
 273   1              set_sda_out();
 274   1              set_scl_out();
 275   1      #endif
 276   1      
 277   1              set_scl_lo();
 278   1              if(val)
 279   1              {
 280   2                      set_sda_hi();
 281   2              }
 282   1              else
 283   1              {
 284   2                      set_sda_lo();
 285   2              }
 286   1              
 287   1              OneNop();
 288   1              set_scl_hi();
 289   1              OneNop();
 290   1              set_scl_lo();
 291   1      }
 292          
 293          /*---------------------------------------------------
 294          int i2c_gpio_phase_get_bit(id);
 295                  Set a BIT (Hi or Low)
 296                  Stream Format:
 297                          SCL   _____/---\
 298                          SDA   ??AAAAAAAA
 299                          width  4.7u| 4u|
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 6   

 300                  Arguments:
 301                          NONE
 302                  Return value:
 303                          int i   : Set(1) or Clear(0) this bit on iic bus
 304          ----------------------------------------------------*/
 305          static INT8 i2c_gpio_phase_get_bit()
 306          {
 307   1              int ret = 0;
 308   1              set_sda_in();
 309   1              
 310   1              /* Hi Ind */
 311   1              set_sda_hi();
 312   1              OneNop();
 313   1      
 314   1              set_scl_hi();
 315   1              OneNop();
 316   1      
 317   1              ret = get_sda();
 318   1              set_scl_lo();
 319   1      
 320   1              return ret;
 321   1      }
 322          
 323          /*---------------------------------------------------
 324          int i2c_gpio_phase_set_byte(UINT32 id, UINT8 data);
 325                  Perform a byte write process
 326                  Stream Format:
 327                          SCL   ___/-\___/-\___/-\___/-\___/-\___/-\___/-\___/-\__/-\
 328                          SDA   --< B7>-< B6>-< B5>-< B4>-< B3>-< B2>-< B1>-< B0>-Check
 329                          Clock Low: 4.7u, High: 4.0u.                            Ack
 330                  Data exchanged at CLK Low, ready at SCL High
 331                  Arguments:
 332                          char data       - Data to send on iic bus
 333                  return value:
 334                          The /ack signal returned from slave
 335          ----------------------------------------------------*/
 336          static UINT8 i2c_gpio_phase_set_byte( UINT8 dat)
 337          {
 338   1              UINT8 i;
 339   1      
 340   1              for (i = 0; i < 8; i++)
 341   1              {
 342   2                      if (dat & 0x80)
 343   2                      {
 344   3                              i2c_gpio_phase_set_bit(1);
 345   3                      }
 346   2                      else
 347   2                      {
 348   3                          i2c_gpio_phase_set_bit(0);
 349   3                      }
 350   2      
 351   2                      dat <<= 1;
 352   2              }
 353   1              
 354   1              return(i2c_gpio_phase_get_bit());
 355   1      }
 356          
 357          
 358          /*---------------------------------------------------
 359          char i2c_gpio_phase_get_byte(UINT32 id, int ack);
 360                  Perform a byte read process
 361                                  by Charlemagne Yue
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 7   

 362                  SCL   ___/-\___/-\___/-\___/-\___/-\___/-\___/-\___/-\___/-\
 363                  SDA   --< B7>-< B6>-< B5>-< B4>-< B3>-< B2>-< B1>-< B0>-(Ack)
 364                  Clock Low: 4.7u, High: 4.0u.
 365              Data exchanged at CLK Low, ready at SCL High
 366          ----------------------------------------------------*/
 367          static UINT8 i2c_gpio_phase_get_byte( int ack)
 368          {
 369   1              UINT8 ret = 0;
 370   1              UINT8 i;
 371   1      
 372   1              for (i = 0; i < 8; i++)
 373   1              {
 374   2                      ret <<= 1;
 375   2                      ret |= i2c_gpio_phase_get_bit();
 376   2              }
 377   1              
 378   1              i2c_gpio_phase_set_bit(ack);
 379   1      
 380   1              return ret;
 381   1      }
 382          
 383          /*---------------------------------------------------
 384          INT32 i2c_gpio_read_no_stop(UINT32 id, UINT8 slv_addr, UINT8 *data, UINT32 len);
 385                  Perform bytes read process but no stop
 386                  Stream Format:
 387                          S<SLV_R><Read>
 388                          S               : Start
 389                          <SLV_R> : Set Slave addr & Read Mode
 390                          <Read>  : Read Data
 391                  Arguments:
 392                          BYTE slv_addr - Slave Address
 393                          BYTE reg_addr - Data address
 394                  Return value:
 395                          Data returned
 396          ----------------------------------------------------*/
 397          static INT8 i2c_gpio_read_no_stop( UINT8 slv_addr, UINT8 *dat, int len)
 398          {
 399   1              UINT8 i = I2C_GPIO_TIMES_OUT;
 400   1      
 401   1              slv_addr |= 1;/* Read */
 402   1              while (--i)/* Ack polling !! */
 403   1              {
 404   2                      i2c_gpio_phase_start();   //Start i2c bus
 405   2      
 406   2                      /* has /ACK => i2c_gpio_phase_start transfer */
 407   2                      if(!i2c_gpio_phase_set_byte( slv_addr))
 408   2                      {
 409   3                              break;
 410   3                      }
 411   2                      
 412   2                      /* device is busy, issue i2c_gpio_phase_stop and chack again later */
 413   2                      i2c_gpio_phase_stop();
 414   2                      delay_ms(1);    /* wait for 1mS */
 415   2              }
 416   1              
 417   1              if (i == 0)
 418   1              {
 419   2                      return ERR_TIME_OUT;
 420   2              }
 421   1      
 422   1              for (i = 0; i < (len - 1); i++)
 423   1              {
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 8   

 424   2                      /*with no /ack to stop process */
 425   2                      dat[i] = i2c_gpio_phase_get_byte( 0);
 426   2              }
 427   1              
 428   1              dat[len - 1] = i2c_gpio_phase_get_byte(1);
 429   1              return SUCCESS;
 430   1      }
 431          
 432          /*---------------------------------------------------
 433          INT32 i2c_gpio_write_no_stop(UINT32 id, UINT8 slv_addr, UINT8 *data, UINT32 len);
 434                  Perform bytes write process but no stop
 435                  Stream Format:
 436                          S<SLV_W><Write>
 437                          S               : Start
 438                          <SLV_W> : Set Slave addr & Write Mode
 439                          <Write> : Send Data
 440                  Arguments:
 441                          BYTE slv_addr - Slave Address
 442                          BYTE value    - data to write
 443                  Return value:
 444                          NONE
 445          ----------------------------------------------------*/
 446          static INT8 i2c_gpio_write_no_stop( UINT8 slv_addr, UINT8 *dat, int len)
 447          {
 448   1              UINT8 i = I2C_GPIO_TIMES_OUT;
 449   1      
 450   1              slv_addr &= 0xFE;                                       /*Write*/
 451   1              while (--i)                                                     /* Ack polling !! */
 452   1              {
 453   2                      i2c_gpio_phase_start();
 454   2                      /* has /ACK => i2c_gpio_phase_start transfer */
 455   2                      if(!i2c_gpio_phase_set_byte(slv_addr))
 456   2                      {
 457   3                              //PMU_PRINTF("i2c_gpio_write_no_stop Ack polling OK!\n");
 458   3                              break;
 459   3                      }
 460   2                      
 461   2                      /* device is busy, issue i2c_gpio_phase_stop and chack again later */
 462   2                      i2c_gpio_phase_stop();
 463   2                      delay_ms(1);/* wait for 1mS */
 464   2                      //PMU_PRINTF("i2c_gpio_write_no_stop Ack polling !\n");
 465   2              }
 466   1      
 467   1              if (i == 0)
 468   1              {
 469   2                      //PMU_PRINTF("i2c_gpio_write_no_stop err ERR_TIME_OUT!\n");
 470   2                      return ERR_TIME_OUT;
 471   2              }
 472   1      
 473   1              for (i = 0; i < len; i++)
 474   1              {
 475   2                      i2c_gpio_phase_set_byte(dat[i]);
 476   2              }
 477   1      
 478   1              return SUCCESS;
 479   1      }
 480          
 481          /*---------------------------------------------------
 482          INT32 i2c_gpio_read(UINT32 id, UINT8 slv_addr, UINT8 *data, UINT32 len);
 483                  Perform a byte read process
 484                  Stream Format:
 485                          S<SLV_R><Read>P
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 9   

 486                          S               : Start
 487                          P               : Stop
 488                          <SLV_R> : Set Slave addr & Read Mode
 489                          <Read>  : Read Data
 490                  Arguments:
 491                          BYTE slv_addr - Slave Address
 492                          BYTE reg_addr - Data address
 493                  Return value:
 494                          Data returned
 495          ----------------------------------------------------*/
 496          static UINT8 i2c_gpio_read(UINT8 slv_addr, UINT8 *dat, int len)
 497          {
 498   1              INT8 ret;
 499   1              if ((ret = i2c_gpio_read_no_stop(slv_addr, dat, len)) != SUCCESS)
 500   1              {
 501   2                      //PMU_PRINTF("i2c_gpio_read err\n");
 502   2                      return ret;
 503   2              }
 504   1              
 505   1              i2c_gpio_phase_stop();
 506   1              delay_ms(1000);
 507   1      
 508   1              return SUCCESS;
 509   1      }
 510          
 511          /*---------------------------------------------------
 512          INT32 i2c_gpio_write(UINT8 slv_addr, UINT8 *data, UINT32 len);
 513                  Perform bytes write process
 514                  Stream Format:
 515                          S<SLV_W><Write>P
 516                          S               : Start
 517                          P               : Stop
 518                          <SLV_W> : Set Slave addr & Write Mode
 519                          <Write> : Send Data
 520                  Arguments:
 521                          BYTE slv_addr - Slave Address
 522                          BYTE value    - data to write
 523                  Return value:
 524                          NONE
 525          ----------------------------------------------------*/
 526          static INT8 i2c_gpio_write( UINT8 slv_addr, UINT8 *dat, int len)
 527          {
 528   1              INT8 ret;
 529   1          
 530   1              if ((ret = i2c_gpio_write_no_stop(slv_addr, dat, len)) != SUCCESS)
 531   1              {
 532   2                      return ret;
 533   2              }
 534   1          
 535   1              i2c_gpio_phase_stop();
 536   1          
 537   1              return SUCCESS;
 538   1      }
 539          
 540          static void show_off()
 541          {
 542   1              // 0x00 
 543   1              // 0x3f : o
 544   1              // 0x71 : F
 545   1              // 0x80 : :
 546   1              UINT8 led_map[4]={0x00,0x3f,0x71,0x80};
 547   1              i2c_gpio_write(DIG3_ADDR,&led_map[2],1); //F
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 10  

 548   1              i2c_gpio_write(DIG2_ADDR,&led_map[2],1); //F
 549   1              i2c_gpio_write(DIG1_ADDR,&led_map[1],1); //O 
 550   1              i2c_gpio_write(DIG0_ADDR,&led_map[0],1); //     
 551   1      }
 552          
 553          static void show_bank()
 554          {
 555   1              UINT8 led_map[4]={0x3f,0x71,0x00,0x5c};
 556   1      
 557   1              i2c_gpio_write(DIG0_ADDR,&led_map[2],1);        
 558   1              i2c_gpio_write(DIG1_ADDR,&led_map[2],1);
 559   1              i2c_gpio_write(DIG2_ADDR,&led_map[2],1);
 560   1              i2c_gpio_write(DIG3_ADDR,&led_map[2],1);
 561   1      }
 562          
 563          /*
 564            ali demo  only show 4 bit led,   such as ,hour_shi ,hour_ge ,min_shi,min_ge
 565            you can show more leds if you need for your board
 566          */
 567          static void show_time(pRTC_TIMER rtc)
 568          {
 569   1              UINT8  min_ge;
 570   1              UINT8  min_shi;
 571   1              UINT8  hour_ge;
 572   1              UINT8  hour_shi;
 573   1              UINT8  show_colon;
 574   1      
 575   1              UINT8 led_map[10]={0x3f,0x06,0x5b,0x4f, 0x66,0x6d,0x7d,0x07, 0x7f,0x6f};
 576   1         
 577   1              min_ge  = rtc->min%10;
 578   1              min_shi = rtc->min/10;
 579   1              hour_ge = rtc->hour%10;
 580   1              hour_shi= rtc->hour/10;
 581   1      
 582   1              show_colon = led_map[hour_ge]|0x80; // show : code
 583   1      
 584   1              i2c_gpio_write(DIG0_ADDR,&led_map[hour_shi],1);   
 585   1              i2c_gpio_write(DIG1_ADDR,&led_map[hour_ge],1);
 586   1      
 587   1              if(rtc->sec%2 == 0)
 588   1              {
 589   2                      i2c_gpio_write(DIG1_ADDR,&show_colon,1); // show :
 590   2              }
 591   1      
 592   1              i2c_gpio_write(DIG2_ADDR,&led_map[min_shi],1);  
 593   1              i2c_gpio_write(DIG3_ADDR,&led_map[min_ge],1);   
 594   1      }  
 595          
 596          /*
 597           ali demo only enable gpio for ii2,  customer can config for your board in this function
 598           */
 599          void pannel_init()
 600          {
 601   1              hal_mcu_gpio_en(SYS_I2C_SDA);//enable sda gpio
 602   1              hal_mcu_gpio_en(SYS_I2C_SCL);//enable scl gpio
 603   1      
 604   1              hal_gpio_bit_dir_set(SYS_I2C_SDA, HAL_GPIO_O_DIR);//output
 605   1              hal_gpio_bit_dir_set(SYS_I2C_SCL, HAL_GPIO_O_DIR);//output
 606   1      }
 607          
 608          void show_pannel(enum SHOW_TYPE show_type, pRTC_TIMER rtc)
 609          {    
C51 COMPILER V7.06   PANNEL                                                                10/27/2014 10:37:58 PAGE 11  

 610   1              if(show_type ==SHOW_BANK)
 611   1              {
 612   2                      //printf("show_bank!\n");
 613   2                      show_bank();
 614   2              }
 615   1              else if(show_type ==SHOW_TIME)
 616   1              {
 617   2                      show_time(rtc);
 618   2              }
 619   1              else
 620   1              {
 621   2                      //printf("show off!\n");
 622   2                      show_off();
 623   2              }
 624   1      }
 625          
 626          INT8 pannel_scan()
 627          {
 628   1              UINT8 pan_key = 0;
 629   1              i2c_gpio_read(KEY_ADDR, &pan_key, 1);
 630   1              if(0x2e != pan_key)
 631   1              {
 632   2                      PMU_WRITE_BYTE(0x5100, pan_key);
 633   2                      PMU_WRITE_BYTE(0x5200, pan_key);
 634   2                      PMU_WRITE_BYTE(0x5300, pan_key);
 635   2              }
 636   1              
 637   1      #ifdef PMU_MCU_DEBUG
                      printf("pan_key=%0bx\n", pan_key);
              #endif
 640   1      
 641   1              if(PANNEL_KEY == pan_key)
 642   1              {
 643   2                      return SUCCESS;
 644   2              }
 645   1              
 646   1              return ERROR ;      
 647   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1418    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----      66
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
